---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
      - name: backend
        image: 874772885665.dkr.ecr.us-west-2.amazonaws.com/talentaibackend:latest  # Replace with your ECR image URL
        ports:
        - containerPort: 5004  # The port your backend application is listening on
        env:
        - name: NODE_ENV
          value: "production"
        # Add any other environment variables here as needed
---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
spec:
  selector:
    app: backend  # This selector ensures traffic is routed to the backend pods
  ports:
    - protocol: TCP
      port: 80        # Expose the backend service on port 80 externally
      targetPort: 5004  # The container port the backend app is listening on
  type: LoadBalancer  # This exposes the service externally via Load Balancer
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: backend-ingress
  annotations:
    alb.ingress.kubernetes.io/scheme: internet-facing  # Expose Load Balancer publicly
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-west-2:874772885665:certificate/c4fe4ff0-d82c-49a2-a454-81e335b75ab0  # SSL Certificate ARN from ACM
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS": 443}]'  # Listen on HTTPS port
    alb.ingress.kubernetes.io/target-type: ip  # Use pod IP as target for Load Balancer
spec:
  rules:
  - host: backend.talentai.bid  # Custom domain for backend
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: backend-service  # This routes traffic to the backend service
            port:
              number: 80  # Expose the backend on port 80 internally
